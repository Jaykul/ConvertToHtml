version: 1.0.0.{build}

install:
  - cinst pester
  - ps: |
      $nuGetPath = "$env:SystemDrive\nuget.exe"
      $webClient = New-Object 'System.Net.WebClient';
      $webClient.DownloadFile( 'https://oneget.org/nuget-anycpu-2.8.3.6.exe', $nuGetPath )  

build_script:
  - ps: |
      $nuGetPath = "$env:SystemDrive\nuget.exe"
      mkdir -force .\out > $null
      mkdir -force .\nuget > $null

      # Update version to current Build Version
      $versionParts = ($env:APPVEYOR_BUILD_VERSION).split('.')
      Import-Module .\ConvertToHtml
      $moduleInfo = Get-Module -Name ConvertToHtml
      $newVersion = New-Object -TypeName 'System.Version' -ArgumentList @($versionParts[0],$versionParts[1],$versionParts[2],$versionParts[3])
      $FunctionsToExport = @()
      foreach($key in $moduleInfo.ExportedFunctions.Keys)
      {
          $FunctionsToExport += $key
      }
      copy-item .\ConvertToHtml\ConvertTohtml.psd1 .\ConvertTohtmlOrigPsd1.ps1
      New-ModuleManifest -Path .\ConvertToHtml\ConvertTohtml.psd1 -Guid $moduleInfo.Guid -Author $moduleInfo.Author -CompanyName $moduleInfo.CompanyName `
       -Copyright $moduleInfo.Copyright -RootModule $moduleInfo.RootModule -ModuleVersion $newVersion -Description $moduleInfo.Description -FunctionsToExport $FunctionsToExport
      # Done Updating Version

      # Create Nuget package
      [xml]$xml = Get-Content -Raw .\ConvertToHtml\ConvertToHtml.nuspec
      $xml.package.metadata.version = $env:APPVEYOR_BUILD_VERSION
      $xml.OuterXml | out-file -FilePath .\ConvertToHtml\ConvertToHtml.nuspec
      &$nuGetPath pack .\ConvertToHtml\ConvertToHtml.nuspec -outputdirectory  .\nuget
      if($env:ProjectApiKey)
      {
        Write-Host -ForegroundColor Yellow 'publishing...'
        ls .\nuget | % {
          &$nuGetPath push $_.FullName -ApiKey $env:ProjectApiKey -Source 'https://ci.appveyor.com/nuget/converttohtml-t37xti79gww1'
        }
      }
      else
      {
        Write-Host -ForegroundColor Yellow 'no api key'
      }

      7z a -tzip .\out\ConvertToHtml.zip .\ConvertToHtml\*.*
      

# Artifacts would not be collected if build failed. To do that, we use on_finish:
#-artifacts:
#  - path: nuget\*.nupkg

on_finish:
  - ps: |
      ls .\out | % { Push-AppveyorArtifact $_.FullName }

test_script:
  - ps: |
      # setup variables for the whole build process
      #
      $script:failedTestsCount = 0
      $webClient = New-Object 'System.Net.WebClient';
      #
      function RunTest([string]$filePath) {
          $testResultsFile = "TestsResults.xml"
          $res = Invoke-Pester -Path $filePath -OutputFormat NUnitXml -OutputFile $testResultsFile -PassThru
          $webClient.UploadFile("https://ci.appveyor.com/api/testresults/nunit/$($env:APPVEYOR_JOB_ID)", (Resolve-Path $testResultsFile))
          return $res
      }
      #
      function Write-Info([string]$message) {
        Write-Host -ForegroundColor Yellow  "[APPVEYOR] [$([datetime]::UtcNow)] $message"
      }
      #
      Write-Info "Hello, I'm appveyor.yml! All messages from me, looks like this one."
      
      ".\tests" | %{ 
        $res = RunTest $_
        $script:failedTestsCount += $res.FailedCount 
      }
      
      if ($script:failedTestsCount -gt 0) { throw "$($script:failedTestsCount) tests failed."} else { ls .\nuget | % { Push-AppveyorArtifact $_.FullName }}
