<?xml version="1.0" encoding="utf-8" standalone="no"?>
<test-results xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="nunit_schema_2.5.xsd" name="Pester" total="60" errors="0" failures="0" not-run="0" inconclusive="0" ignored="0" skipped="0" invalid="0" date="2015-04-19" time="10:50:00">
  <environment user="tplunk" machine-name="TPLUNKSURFACE3" cwd="C:\Users\tplunk\Documents\GitHub\ConvertToHtml" user-domain="NTDEV" platform="Microsoft Windows 8.1 Enterprise|C:\WINDOWS|\Device\Harddisk0\Partition4" nunit-version="2.5.8.0" os-version="6.3.9600" clr-version="4.0.30319.34209" />
  <culture-info current-culture="en-US" current-uiculture="en-US" />
  <test-suite type="Powershell" name="C:\Users\tplunk\Documents\GitHub\ConvertToHtml\tests\" executed="True" result="Success" success="True" time="2.869" asserts="0">
    <results>
      <test-suite type="TestFixture" name="Module Import" executed="True" result="Success" success="True" time="0.8702" asserts="0" description="Module Import">
        <results>
          <test-case description="should not throw or have an error" name="Module Import.should not throw or have an error" executed="True" time="0.8702" asserts="0" success="True" result="Success" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Process example" executed="True" result="Success" success="True" time="0.3499" asserts="0" description="Process example">
        <results>
          <test-case description="Should not throw" name="Process example.Should not throw" executed="True" time="0.3499" asserts="0" success="True" result="Success" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Dir example" executed="True" result="Success" success="True" time="0.1608" asserts="0" description="Dir example">
        <results>
          <test-case description="Should not throw" name="Dir example.Should not throw" executed="True" time="0.1608" asserts="0" success="True" result="Success" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Get-BackgroundColorStyle" executed="True" result="Success" success="True" time="0.1407" asserts="0" description="Get-BackgroundColorStyle">
        <results>
          <test-case description="Should return null when property name doesnt exist in table" name="Get-BackgroundColorStyle.Should return null when property name doesnt exist in table" executed="True" time="0.088" asserts="0" success="True" result="Success" />
          <test-case description="Should return a static color" name="Get-BackgroundColorStyle.Should return a static color" executed="True" time="0.0176" asserts="0" success="True" result="Success" />
          <test-case description="Should return using this" name="Get-BackgroundColorStyle.Should return using this" executed="True" time="0.0149" asserts="0" success="True" result="Success" />
          <test-case description="Should return using columnValue" name="Get-BackgroundColorStyle.Should return using columnValue" executed="True" time="0.0202" asserts="0" success="True" result="Success" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Get-HeadingName" executed="True" result="Success" success="True" time="0.0716" asserts="0" description="Get-HeadingName">
        <results>
          <test-case description="Should return propertyName when property name doesnt exist in table" name="Get-HeadingName.Should return propertyName when property name doesnt exist in table" executed="True" time="0.0588" asserts="0" success="True" result="Success" />
          <test-case description="Should return heading from table" name="Get-HeadingName.Should return heading from table" executed="True" time="0.0127" asserts="0" success="True" result="Success" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Format-Number" executed="True" result="Success" success="True" time="0.0931" asserts="0" description="Format-Number">
        <results>
          <test-case description="value 1 length 3 should return 001" name="Format-Number.value 1 length 3 should return 001" executed="True" time="0.0651" asserts="0" success="True" result="Success" />
          <test-case description="value 28 length 2 should return 28" name="Format-Number.value 28 length 2 should return 28" executed="True" time="0.012" asserts="0" success="True" result="Success" />
          <test-case description="value 28 length 1 should return 28" name="Format-Number.value 28 length 1 should return 28" executed="True" time="0.016" asserts="0" success="True" result="Success" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Get-CF_Html" executed="True" result="Success" success="True" time="0.1549" asserts="0" description="Get-CF_Html">
        <results>
          <test-case description="Should not be longer than end length" name="Get-CF_Html.Should not be longer than end length" executed="True" time="0.0689" asserts="0" success="True" result="Success" />
          <test-case description="Should add header of length 89" name="Get-CF_Html.Should add header of length 89" executed="True" time="0.0128" asserts="0" success="True" result="Success" />
          <test-case description="First Header line should be version 0.9" name="Get-CF_Html.First Header line should be version 0.9" executed="True" time="0.0139" asserts="0" success="True" result="Success" />
          <test-case description="Second header line should be StartHTML:000089" name="Get-CF_Html.Second header line should be StartHTML:000089" executed="True" time="0.0097" asserts="0" success="True" result="Success" />
          <test-case description="Third header line should be EndHTML:000092" name="Get-CF_Html.Third header line should be EndHTML:000092" executed="True" time="0.0143" asserts="0" success="True" result="Success" />
          <test-case description="Forth Header line should be StartFragment:000089" name="Get-CF_Html.Forth Header line should be StartFragment:000089" executed="True" time="0.0124" asserts="0" success="True" result="Success" />
          <test-case description="Fifth header line should be EndFragment:000092" name="Get-CF_Html.Fifth header line should be EndFragment:000092" executed="True" time="0.0111" asserts="0" success="True" result="Success" />
          <test-case description="Should contain html fragment" name="Get-CF_Html.Should contain html fragment" executed="True" time="0.0116" asserts="0" success="True" result="Success" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Get-Properties" executed="True" result="Success" success="True" time="0.075" asserts="0" description="Get-Properties">
        <results>
          <test-case description="Should return all properties" name="Get-Properties.Should return all properties" executed="True" time="0.0455" asserts="0" success="True" result="Success" />
          <test-case description="Should return properties of the first object" name="Get-Properties.Should return properties of the first object" executed="True" time="0.0123" asserts="0" success="True" result="Success" />
          <test-case description="property Names should match" name="Get-Properties.property Names should match" executed="True" time="0.0171" asserts="0" success="True" result="Success" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="New-FormattedHtmlJson" executed="True" result="Success" success="True" time="0.1966" asserts="0" description="New-FormattedHtmlJson">
        <results>
          <test-case description="should not throw" name="New-FormattedHtmlJson.should not throw" executed="True" time="0.0581" asserts="0" success="True" result="Success" />
          <test-case description="heading should be TypeName" name="New-FormattedHtmlJson.heading should be TypeName" executed="True" time="0.0202" asserts="0" success="True" result="Success" />
          <test-case description="TypeName should be TypeName" name="New-FormattedHtmlJson.TypeName should be TypeName" executed="True" time="0.0127" asserts="0" success="True" result="Success" />
          <test-case description="DoesntExist should throw" name="New-FormattedHtmlJson.DoesntExist should throw" executed="True" time="0.0206" asserts="0" success="True" result="Success" />
          <test-case description="GroupBy should be $null" name="New-FormattedHtmlJson.GroupBy should be $null" executed="True" time="0.0101" asserts="0" success="True" result="Success" />
          <test-case description="GroupByHeading should be $null" name="New-FormattedHtmlJson.GroupByHeading should be $null" executed="True" time="0.0128" asserts="0" success="True" result="Success" />
          <test-case description="property array should have property: foo" name="New-FormattedHtmlJson.property array should have property: foo" executed="True" time="0.0139" asserts="0" success="True" result="Success" />
          <test-case description="property array should have property: foo2" name="New-FormattedHtmlJson.property array should have property: foo2" executed="True" time="0.0115" asserts="0" success="True" result="Success" />
          <test-case description="ColumnHeadings should have property: foo" name="New-FormattedHtmlJson.ColumnHeadings should have property: foo" executed="True" time="0.0147" asserts="0" success="True" result="Success" />
          <test-case description="ColumnHeadings should have property: foo2" name="New-FormattedHtmlJson.ColumnHeadings should have property: foo2" executed="True" time="0.0113" asserts="0" success="True" result="Success" />
          <test-case description="ColumnBackgroundColor should have an example" name="New-FormattedHtmlJson.ColumnBackgroundColor should have an example" executed="True" time="0.0108" asserts="0" success="True" result="Success" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Find-FormatJsonFromFile" executed="True" result="Success" success="True" time="0.0759" asserts="0" description="Find-FormatJsonFromFile">
        <results>
          <test-case description="Should return null for a custom object" name="Find-FormatJsonFromFile.Should return null for a custom object" executed="True" time="0.039" asserts="0" success="True" result="Success" />
          <test-case description="Should return null for an unknown Type" name="Find-FormatJsonFromFile.Should return null for an unknown Type" executed="True" time="0.0107" asserts="0" success="True" result="Success" />
          <test-case description="Should return module json for Process Type" name="Find-FormatJsonFromFile.Should return module json for Process Type" executed="True" time="0.0262" asserts="0" success="True" result="Success" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Convert-FormatObjectJson for an existing json" executed="True" result="Success" success="True" time="0.2313" asserts="0" description="Convert-FormatObjectJson for an existing json">
        <results>
          <test-case description="should be of the correct type" name="Convert-FormatObjectJson for an existing json.should be of the correct type" executed="True" time="0.0509" asserts="0" success="True" result="Success" />
          <test-case description="ColumnHeadings should be a hashtable" name="Convert-FormatObjectJson for an existing json.ColumnHeadings should be a hashtable" executed="True" time="0.0241" asserts="0" success="True" result="Success" />
          <test-case description="ColumnHeadings should have 8 items" name="Convert-FormatObjectJson for an existing json.ColumnHeadings should have 8 items" executed="True" time="0.034" asserts="0" success="True" result="Success" />
          <test-case description="ColumnBackgroundColor should be a hashtable" name="Convert-FormatObjectJson for an existing json.ColumnBackgroundColor should be a hashtable" executed="True" time="0.0219" asserts="0" success="True" result="Success" />
          <test-case description="ColumnBackgroundColor should have 1 items" name="Convert-FormatObjectJson for an existing json.ColumnBackgroundColor should have 1 items" executed="True" time="0.0196" asserts="0" success="True" result="Success" />
          <test-case description="Property should be an object array" name="Convert-FormatObjectJson for an existing json.Property should be an object array" executed="True" time="0.0194" asserts="0" success="True" result="Success" />
          <test-case description="Property should have 8 items" name="Convert-FormatObjectJson for an existing json.Property should have 8 items" executed="True" time="0.0221" asserts="0" success="True" result="Success" />
          <test-case description="GroupBy should be $null" name="Convert-FormatObjectJson for an existing json.GroupBy should be $null" executed="True" time="0.0196" asserts="0" success="True" result="Success" />
          <test-case description="GroupByHeading should be $null" name="Convert-FormatObjectJson for an existing json.GroupByHeading should be $null" executed="True" time="0.0196" asserts="0" success="True" result="Success" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Convert-FormatObjectJson for a json from New-FormattedHtmlJson" executed="True" result="Success" success="True" time="0.2155" asserts="0" description="Convert-FormatObjectJson for a json from New-FormattedHtmlJson">
        <results>
          <test-case description="should be of the correct type" name="Convert-FormatObjectJson for a json from New-FormattedHtmlJson.should be of the correct type" executed="True" time="0.0598" asserts="0" success="True" result="Success" />
          <test-case description="ColumnHeadings should be a hashtable" name="Convert-FormatObjectJson for a json from New-FormattedHtmlJson.ColumnHeadings should be a hashtable" executed="True" time="0.0214" asserts="0" success="True" result="Success" />
          <test-case description="ColumnHeadings should have 2 items" name="Convert-FormatObjectJson for a json from New-FormattedHtmlJson.ColumnHeadings should have 2 items" executed="True" time="0.0152" asserts="0" success="True" result="Success" />
          <test-case description="ColumnBackgroundColor should be a hashtable" name="Convert-FormatObjectJson for a json from New-FormattedHtmlJson.ColumnBackgroundColor should be a hashtable" executed="True" time="0.0173" asserts="0" success="True" result="Success" />
          <test-case description="ColumnBackgroundColor should have 1 items" name="Convert-FormatObjectJson for a json from New-FormattedHtmlJson.ColumnBackgroundColor should have 1 items" executed="True" time="0.0204" asserts="0" success="True" result="Success" />
          <test-case description="Property should be an object array" name="Convert-FormatObjectJson for a json from New-FormattedHtmlJson.Property should be an object array" executed="True" time="0.0183" asserts="0" success="True" result="Success" />
          <test-case description="Property should have 2 items" name="Convert-FormatObjectJson for a json from New-FormattedHtmlJson.Property should have 2 items" executed="True" time="0.0208" asserts="0" success="True" result="Success" />
          <test-case description="GroupBy should be $null" name="Convert-FormatObjectJson for a json from New-FormattedHtmlJson.GroupBy should be $null" executed="True" time="0.0183" asserts="0" success="True" result="Success" />
          <test-case description="GroupByHeading should be $null" name="Convert-FormatObjectJson for a json from New-FormattedHtmlJson.GroupByHeading should be $null" executed="True" time="0.0241" asserts="0" success="True" result="Success" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Get-HtmlEncodedValue" executed="True" result="Success" success="True" time="0.0658" asserts="0" description="Get-HtmlEncodedValue">
        <results>
          <test-case description="should html encode &quot;&lt;&quot; to &amp;lt;" name="Get-HtmlEncodedValue.should html encode &quot;&lt;&quot; to &amp;lt;" executed="True" time="0.0434" asserts="0" success="True" result="Success" />
          <test-case description="should html encode &quot;&gt;&quot; to &amp;lt;" name="Get-HtmlEncodedValue.should html encode &quot;&gt;&quot; to &amp;lt;" executed="True" time="0.0098" asserts="0" success="True" result="Success" />
          <test-case description="should not encode any other character" name="Get-HtmlEncodedValue.should not encode any other character" executed="True" time="0.0126" asserts="0" success="True" result="Success" />
        </results>
      </test-suite>
      <test-suite type="TestFixture" name="Text files formatting" executed="True" result="Success" success="True" time="0.1679" asserts="0" description="Text files formatting">
        <results>
          <test-case description="Doesn't use Unicode encoding" name="Text files formatting.Doesn't use Unicode encoding" executed="True" time="0.1037" asserts="0" success="True" result="Success" />
          <test-case description="We are using spaces for indentaion, not tabs" name="Text files formatting.We are using spaces for indentaion, not tabs" executed="True" time="0.0642" asserts="0" success="True" result="Success" />
        </results>
      </test-suite>
    </results>
  </test-suite>
</test-results>